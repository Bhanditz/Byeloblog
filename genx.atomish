GenX = Origin mimic with(
  writeOut: fn(fname, contents, base: FileSystem cwd,
    if(FileSystem exists?(base, fname), FileSystem removeFile!(base, fname))
    unless(FileSystem exists?(FileSystem parentOf(base, fname)), Shell out("mkdir", "-p", FileSystem parentOf(base, fname)))
    FileSystem withOpenFile(base, fname, fn(out, out println(contents)))),
  built: Array(),
  baseURI:  "",
  build: fn("Method that renders an atomish form from a file into a document. It tries to guess what kind of transform to apply based on the file extension of the file to write.", +todo, base: FileSystem cwd, 
    todo each(task,
      fromFile = "". context = ""
      case(task key,
        Pair, context = task key key. fromFile = task key value,
        Text, context = "".           fromFile = task key)
      say("Generating \"#{fromFile}\" from \"#{task value}\"")
      time = ""
      mktime = fn(x, time = x)
      timeMod = ""
      unless(context ["modified"],
        Shell out(printer: mktime, "stat", "-c", "%y", task value)
        timeMod = time replace(#/([0-9]{4}-[0-9][0-9]-[0-9][0-9]) (.*)\..*([-+Z].*)/, "$1T$2$3") replace(#/([0-9]{2})([0-9]{2})$/, "$1:$2"),
        timeMod = context ["modified"])
      built push!(Map(file: fromFile, modified: timeMod))
      case(fromFile,
        #/.*.css$/, writeOut(base: base, fromFile, CSS render(CSS fromQuotedFile(task value))),
        else,       writeOut(base: base, fromFile, XML render(XML fromQuotedFile(task value, context: XML mimic with(data: context))))))),
  buildTemplate: fn("Method that renders an atomish form from a message into a document. It tries to guess what kind of transform to apply based on the file extension of the file to write.", +todo, base: baseDir, 
    todo each(task,
      fromFile = "". context = ""
      case(task key,
        Pair, context = task key key. fromFile = task key value,
        Text, context = "".           fromFile = task key)
      say("Generating \"#{fromFile}\" from a template")
      time = ""
      mktime = fn(x, time = x)
      timeMod = ""
      unless(context ["modified"],
        timeMod = "",
        timeMod = context ["modified"])
      built push!(Map(file: fromFile, modified: timeMod))
      case(fromFile,
        #/.*.css$/, writeOut(base: base, fromFile, CSS render(CSS fromQuotedTemplate(task value))),
        else,       writeOut(base: base, fromFile, XML render(XML fromQuotedTemplate(task value, context: XML mimic with(data: context))))))),

  deployRaw: fn("Copy a file from the document directory to the deploy directory", +todo, base: baseName,
    todo each(theFile,
      fileFrom = Array(). fileTo = ""
      case(theFile,
        Pair, fileFrom = Array(theFile key).         fileTo = theFile value,
        Text, fileFrom = FileSystem [theFile].       if(fileFrom length != 1, fileTo = "", fileTo = theFile))
      say("Deploying file #{fileFrom flatMap(it, it + " ")}as #{fileTo ?|(base + fileFrom)}")
      fileFrom each(source, Shell out("cp", source, base + fileTo)))),
  sitemap:filter: fn(name,
    if(matches: name =~ #/({name}.*)\.html/,
        if((matches names) include?("name"),
          let(ret, if(matches ["name"] == "index",
                     "",
                     matches ["name"]),
            ret setCell("isTruthy", true)
            ret)))),
  sitemap: fn("Generate a google sitemap.xml based on the urls in built.", base: baseDir, name: "sitemap.xml", filter: GenX sitemap:filter,
    say("Building sitemap: #{name}")
    urls = built map(uri, if(it: filter(uri ["file"]), Map(modified: uri ["modified"], file: baseURI + it))) filter
    writeOut(base: base, name, XML render(XML fromQuotedFile((System cwd) + "/lib/sitemap.ik", context: XML mimic with(data: Map(urls: urls)))))),
  fromMD: fn("Get a markdown file, process it, and return it", filename,
    let(
        pipe, Array(),
        frompipe, fn(x, pipe push!(x)),
      Shell out(printer: frompipe, "markdown", "-F", "0x200004", filename)
      pipe join("\n") replaceAll(#/^"|([^\\])"/, #[$1\\"]))),
  fromMDText: fn("Transform the provided Text from markdown into html", mdtext,
    let(
        pipe, Array(),
        frompipe, fn(x, pipe push!(x)),
      Shell out(printer: frompipe, "markdown", "-F", "0x200004", "--", stdin: mdtext)
      pipe join("\n") replaceAll(#/^"|([^\\])"/, #[$1\\"])))
)
