XML = Origin mimic with(
  doctype: fn("Print a doctype string", type,
    case(type,
      "xml",   #[<?xml version="1.0" encoding="utf-8"?>\n],
      "xhtml", "<!DOCTYPE html>\n")),
  comment: fn("Print a comment", text, "\n<!--\n#{text}\n-->\n"),
  attr:    fn("Print an attribute inline", k, v,
             " #{k}=\"#{v}\""),
  dotify:  fn("Convert exclamation marks to dots in tag names.", tagname,
             tagname replaceAll(/!/, ".")),
  render:  fn(initial_quoted,
             let(
                 stack,    Array(),
                 pair?,    fn(arg,  if(arg length ==(3),
                                      arg [1] name ==("⇒"))),
                 keyword?, fn(arg, if(arg length ==(2),
                                      (arg [0] name ~= /^.*:$/) asBool)),
                 render:tag, fn(unreal_tag,
                   tag = unreal_tag asArray [0]
                   ؟say(tag)
                   ؟say(tag name)
                   ؟say(print(tag args))
                   let(
                     ret, "<#{XML dotify(tag name)}#{tag args map(arg_etc,
                            go = true
                            let(arg,   arg_etc args flatMap(arg_bit,
                                         if(go and(eval(unquote(''(Mirror ["pre_scala_mirror"] dot?(`(''(`(arg_bit)))))))),
                                           Array(),
                                           go = false
                                           Array(arg_bit))),

                                cond(
                                  pair?(arg),     " #{arg [0]}=\"#{arg [2]}\"",
                                  keyword?(arg),  " #{arg [0] name [0 … -2]}=\"#{arg [1]}\"",
                                                  ""))
                          ) join}>",
                     stack push!("</#{XML dotify(tag name)}>")
                     ret)
                 ),
                 unwrap_forms, fn(quoted_possible, already: false,
                     (quoted_possible asArray map(msg,
                       cond(
                          eval(unquote(''(Mirror ["pre_scala_mirror"] brackets?(`(''(`(msg))))))),
                            #.say(print(msg)) . msg args map(arg, XML render(''(`(arg)))) join,
                          eval(unquote(''(Mirror ["pre_scala_mirror"] message?(`(''(`(msg))))))) or(
                          eval(unquote(''(Mirror ["pre_scala_mirror"] call?(`(''(`(msg)))))))),
                            case(msg name,
                              "",   #.say("Commated: #{print_with_forms(msg args)}") . msg args map(x, XML render(''(`(x)))) join,
                              "!",  stack push!(" -->"). "<!-- ",
                                    render:tag(''(`(msg)))),
                          eval(unquote(''(Mirror ["pre_scala_mirror"] dot?(`(''(`(msg))))))),
                            if(stack length > 1, stack pop!, ""),
                          eval(unquote(''(Mirror ["pre_scala_mirror"] idempotent?(`(''(`(msg))))))),
                            msg asText,
                            #; If msg is not anything else, we assume it must be an AtomishForm and should be unwrapped 'in place', unless it is two forms deep
                            if(already,
                              msg args map(arg, XML render(''(`(arg)), already: false)) join,
                              msg args map(arg, unwrap_forms(''(`(arg)), already: true)) join))) join)),
                 unwrap_forms(initial_quoted) +(stack join)
           )),
  fromQuotedFile: fn("Read a file in XML render compatible form, and turn it into a Message.", filename, context: XML,
    #; Access 'context' through lexical cell "context"
    eval(read(FileSystem readFully(filename))))
)
